1.3 Threat Actors

Threat actors and attributes
- entity responsible for an event that has impact on safety
- also called a malicious actor
- broad scope of actors, motivations vary widely
- intelligence from many sources, Open Source intelligence starting point

Script kiddies (not mb youngster)
- runs pre-made scripts
- no knowledge, no funding, motivated by the hunt (working the ego)
- can be internal or (usually) external

Hacktivist
- hacker with a purpose > social change or political agenta
- often external
- can be sophisticated
	- specific hacks, DoS, site defacing, leaks
- funding limited, some orgs fundraise

Organized crime
- professional criminals, lots of funding
- motivated by money, almost always external
- very sophisticated, best hacking money can buy
- organized (one hacks, one manages exploits, one sells, etc.)

Nation states / APT
- Governments (national security, job security)
- always external entity
- highest sophistication
	- Military control, utilities, financial control
- constant attacks, massive resources
	- APT (Advanced Persistent Threat)

Insiders
- sophistication may not be advanced, but have institutional knowledge
	- attacks can be directed at vulnerable systems
	- bad guy knows what to hit
- extensive resources, eating away from the inside

Competitors
- different motivations (DoS, espionage, harm reputation)
- high lvl of sophistication
	- funding can be significant
	- competitive upside is huge (unethical)
- different intents
	- shut down competitor during event
	- steal customer list
	- corrupt DBs
	- take financial info




1.4 Penetration Testing

- Simulated attack, similiar to vuln scanning, except you actually try to exploit them
- Often a compliance mandate, regular testing by 3rd-party
- Stay up-to-date

Passive reconnaissance
- Learn from open sources
- Social media, corp web site, online forums, reddit, social eng, dumpster diving, business org

Active reconnaissance
- Trying the doors
- ping/port scans, dns queries, OS scans/fingerprinting, service/version scans

Exploiting vulnerabilities
- Try to break into the system (may break systems)
- PW brute-force, social eng, db injection, buffer overflow

The process
- Initial exploitation, get into network, mostly challenging
- Persistence, set up a backdoor, user accounts, change PWs
- The pivot, inside network often open, jump to the rest of the network

Black box
- pentester has no info of the system under attack
- blin-test

White box
- Full disclosure

Grey box
- Mix of black and white
- Focus on certain system or apps





1.5 Vulnerability Scanning

- usually minimally invasive, unlike pentest
- port scan
- identify systems and security devices
- test from the outside and inside
- gather info much as possible

Scan types
- non-intrusive scans, gather info, dont exploit
- intrusive scans, try the vulnerability to see if works
- non-credentialed scan, can't login to remote device
- credentialed scan, normal user, emulates insider attack

Identify vulnerability
- scanner looks for everything
- vulnerabilities can be cross-referenced online
- some vulns can't be definitively identified (need to check manually)

Scan results
- Lack of security controls
	- no firewall, av etc.
- misconfigurations
	- open shares, guest access
- Real vulnerabilities (newer and older ones)

Dealing with FPs
- different than low-severity vuln
- false negatives, scan didn't detect it
- remember to keep up to date, the scanner




1.6 Vulnerability Types
- digital, physical
- programming, network designt, process/proicedure
- all can be exploited

Race condition
- programming conundrum
- sometimes many things happen at the same time and weren't considered

End-of-life (EoL) vulnerabilites
- vendor support ends, no sec patches
- upgrade to maintain security

Embedded sytstem vulns
- no direct access to OS
- often these devices connected to Inet
- old, outdated OS software - may not even be possible to update

Lack of vendor support
- security requires diligence, potential vuln is alway there
- vendors (mostly) only ones who can fix their products

Improper input handling
- many apps accept user input
- all input should be considered malicious - check everything
- allowing invalid input can be devastating (sql inj, DoS, buffer overflows..)

Improper error handling
- messages should info just enough
	- avoid too much detail
		- network info, memory dump, stack traces, db dumps

Misconfiguration/weak configuration
- easy to leave door open - hackers will find it

Default configurations
- every app / network device has default login
- some never changed
- botnets abuse that (Mirai botnet)

Untrained user
- takes one person to allow a breach, can happen unknowingly
- training is critical
- annual reinforcement

Improperly configured accounts
- technical and process issue
	- audits are important
- accounts without a need (abandoned..)
- admin access should be severely limited
- direct admin login should only be possible on server console

Vulnerable business processes
- doesn't need to be technical vulnerability, hackers will find it

Weak cipher suites
- Suite
	- encryption protocol (AES, 3DES..)
	- Length of encryption key (40, 128, 256 bits..)
	- Hash used for integrity check (SHA, MD5..)
- some easier to break
	- weak or null encryption (less than 128bit key size), outdated hash (MD5)
- TLS most common

Memory/buffer vulns
- manipulating memory advantageous but difficult
- memory leak
	- unused memory not properly released, begins to grow in size
	- eventually uses all and system crashes
- integer overflow
	- large number into a smaller sized space
	- shouldn't be able to manipulate memory this way
- buffer overflow
	- overwriting a buffer of memory, spills overe into other areas
	- NULL Pointer dereference
		- programming technique that references a portion of memory
		- if reference points to nothing > crashes, debug, DoS
	- DLL injection
		- external library that manipulates OS/app to run the library

System sprawl/undocumented assets
- VMs etc. so easy to spin up
- keeping track is challenging
- easy to miss forgotten devices
- pivot points, devices not part of regular security patches


Arcitecture/design weaknesses
- security fails if you dont have locks in the doors
	- network doors aren't always visible
- examine every part of network
	- ingress, vpn, 3rd-party access, internal controls, account access, front door / conference room access

New threats/zero day
- what you don't know can hurt you
- vulns sitting in your system waiting to be found
- patch process once zero day is discovered

Improper certificate and key management
- needs to be well planned
- what will be orgs CA?
- how will CA content be protected?
- how intermediate CAs created and managed?
- who will validate and signt certs?
- validation process?


